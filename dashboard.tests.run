#! /bin/bash
VERSION=1.0.6

# Run the server tests during the development cycle
# Run as user that owns the dashboard files - your user if you are
# running in a local directory, as dims if you are running against
# the installation directory

# Usage:
# ./dashboard.test.run server
# will run the tests against /opt/dims/srv/dims-dashboard
#
# ./dashboard.test.run local
# will run the tests from the current directory
#
# Jenkins will run from a local directory - its workspace/dims-dashboard.

# Set up common functions and variables.
source $DIMS/bin/test_functions.sh

if [ "$1" == "-h" -o "$1" == "--help" -o $# -lt 1 ]; then
  cat <<EOD
Usage: $BASE server
           Runs tests on installed dashboard at /opt/dims/bin/svr/dims-dashboard

       $BASE local
           Runs test on code at current location (should be root of project).
           Note that tests require node.js environment and the dashboard
           dependencies must be installed (via configure)

       $BASE local --no-publish
           Same as $BASE local, but will not publish results to logmon
           --no-publish should be the second argument

EOD
  exit 1
fi

if [ "$1" == "server" ]; then
  RUNDIR=/opt/dims/srv/dims-dashboard
elif [ "$1" == "local" ]; then
  RUNDIR=$PWD
else
  echo "You supplied an invalid argument. Use server or local. Exit now..."
  exit 1
fi

if [ "$2" == "--no-publish" ]; then
  PUBLISH=0
  echo "[+++] Results are not being published to test fanout"
else
  PUBLISH=1
  echo "[+++] Results are being published to test fanout"
fi

echo "[+++] Running tests agains dashboard in $RUNDIR"

if [ $VERBOSE -eq 1 ]; then
  echo "[+++] Verbose is on. Will output result to stdout and test fanout"
fi

if [ $DEBUG -eq 1 ]; then
  echo "[+++] Debug is on. Will set log_level to debug. Not good for clean test"
  echo "[+++] output, however. Use to fix problems with tests."
fi

DATE=$(iso8601dateshort)

# Cleanup on exit
trap "rm -f $TFILE" EXIT

TFILE=$(mktemp --tmpdir $$.dashboardtest.$RANDOM.XXXXXX)

if [ $DEBUG -eq 1 ]; then
  export LOG_LEVEL=debug
else
  export LOG_LEVEL=info
fi

export NODE_ENV=test
echo "${RUNDIR}/VERSION"
VERSIONFILE=${RUNDIR}/VERSION
APPVERSION=$(cat $VERSIONFILE)

# Enable this later if we want to run tests using rabbitmq docker container
# RABBITMQ_HOST=$(sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' rabbit)
TEST=${TEST:="tap"}

cd $RUNDIR && . /opt/dims/envs/dimsenv/bin/activate
cd server

# export RABBITMQ_HOST=$RABBITMQ_HOST
if [ $VERBOSE -eq 1 ]; then
  header 2>&1 | tee -a $TFILE
  echo "DIMS-DASHBOARD Test Run for version $(cat $VERSIONFILE)" 2>&1 | tee -a $TFILE
  npm run test-$TEST 2>&1 | tee -a $TFILE
else
  header > $TFILE
  echo "DIMS-DASHBOARD Test Run for version $(cat $VERSIONFILE)" >> $TFILE
  npm run test-$TEST >> $TFILE
fi

PASSED=$(cat $TFILE | grep "# pass")
PASSED=${PASSED:8}
FAILED=$(cat $TFILE | grep "# fail")
FAILED=${FAILED:8}

if [ $VERBOSE -eq 1 ]; then
  printresults $PASSED $FAILED 2>&1 | tee -a $TFILE
else
  printresults $PASSED $FAILED >> $TFILE
fi

if [ $PUBLISH -eq 1 ]; then
  logmon -l test -s $TFILE
fi

exit 0
